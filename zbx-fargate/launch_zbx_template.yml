---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Zabbix ECS on Fargate

Parameters:
    ProjectName:
    Type: String
    Default: "default"
    Description: "Project(Service) name"
    MaxLength: 10
    MinLength: 2
  Env:
    Type: String
    Default: "dev"
    Description: "Environment"
    AllowedValues:
      - dev
      - stg
      - prd
  Role:
    Type: String
    Default: "zbx"
    Description: ""
  MasterUsername:
    Type: String
    Default: zabbixuser
    Description: "Database default user name"
  MasterUserPassword:
    Type: String
    Description: "Database default user password"
    NoEcho: true

Resources:
  # IAM Role
  IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs.amazonaws.com"
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: !Sub "${ProjectName}-${Env}-${Role}-iam-role"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/aws-service-role/AmazonECSServiceRolePolicy"
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # Security groups
  AlbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "for ${Role} alb"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol : "-1"
          CidrIp: "0.0.0.0/0"
      VpcId: { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc" }
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-${Role}-alb-sg"
        - Key: Env
          Value: !Ref Env
        - Key: Role
          Value: !Ref Role

  WebSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "for ${Role} web"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
          Description: !Sub "from ${Role} alb"
      SecurityGroupEgress:
        - IpProtocol : "-1"
          CidrIp: "0.0.0.0/0"
      VpcId: { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc" }
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-${Role}-web-sg"
        - Key: Env
          Value: !Ref Env
        - Key: Role
          Value: !Ref Role

  ServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "for ${Role} server"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 10051
          ToPort: 10051
          CidrIp: { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc-cidr" }
          Description: !Join
            - " "
            - - "from"
              - { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc" }
              - "any instances"
        - IpProtocol: "tcp"
          FromPort: 10050
          ToPort: 10050
          CidrIp: { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc-cidr" }
          Description: !Join
            - " "
            - - "from"
              - { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc" }
              - "any instances"
      SecurityGroupEgress:
        - IpProtocol : "-1"
          CidrIp: "0.0.0.0/0"
      VpcId: { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc" }
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-${Role}-srv-sg"
        - Key: Env
          Value: !Ref Env
        - Key: Role
          Value: !Ref Role

  # Launch ALB
  AlbTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub "${ProjectName}-${Env}-${Role}-alb-tg"
      Protocol: "HTTP"
      Port: 80
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: 80
      HealthCheckPath: "/"
      TargetType: "ip"
      VpcId: { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc" }
  Alb:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ProjectName}-${Env}-${Role}-pub-alb"
      Type: "application"
      Scheme: "internet-facing"
      IpAddressType: "ipv4"
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
  AlbListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      LoadBalancerArn: !Ref Alb
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn

  # Launch NLB
  TargetGroupNlb:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub "${ProjectName}-${Env}-${Role}-nlb-tg"
      Protocol: "TCP"
      Port: 10051
      HealthCheckProtocol: "TCP"
      TargetType: ip
      VpcId: { "Fn::ImportValue": !Sub "${ProjectName}-${Env}-vpc" }
  Nlb:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ProjectName}-${Env}-${Role}-pub-nlb"
      Type: network
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
  ListenerNlb:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupNlb
      LoadBalancerArn: !Ref Nlb
      Protocol: TCP
      Port: 10051

  # Create Cloudwatch log group
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "${ProjectName}-adm-zbx-logs"
      RetentionInDays: 7

  # Create ECS cluster
  EcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${ProjectName}-${Env}-${Role}-ecs-cluster"

  # Create zabbix server task definition
  TaskServer:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt IamRole.Arn
      Family: zabbix-server
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: zabbix-server-mysql
          Image: zabbix/zabbix-server-mysql:alpine-trunk
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: zabbix
          MemoryReservation: 512
          PortMappings:
            - Protocol: tcp
              HostPort: 10051
              ContainerPort: 10051
          Environment:
            - Name: DB_SERVER_HOST
              Value: !GetAtt DbInstance.Endpoint.Address
            - Name: DB_SERVER_PORT
              Value: 3306
            - Name: MYSQL_DATABASE
              Value: zabbix
            - Name: MYSQL_USER
              Value: !Ref MasterDBUser
            - Name: MYSQL_PASSWORD
              Value: !Ref MasterDBPassword
            - Name: ZBX_DEBUGLEVEL
              Value: 3
        - Name: zabbix-agent
          Image: zabbix/zabbix-agent:alpine-trunk
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: zabbix
          MemoryReservation: 256
          PortMappings:
            - Protocol: tcp
              HostPort: 10050
              ContainerPort: 10050
          Environment:
            - Name: ZBX_SERVER_HOST
              Value: 127.0.0.1
            - Name: ZBX_ACTIVESERVERS
              Value: 127.0.0.1:10050
            - Name: ZBX_HOSTNAME
              Value: Zabbix server
        - Name: postfix
          Image: catatnight/postfix
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: zabbix
          MemoryReservation: 256
          PortMappings:
            - Protocol: tcp
              HostPort: 25
              ContainerPort: 25
          Environment:
            - Name: maildomain
              Value: smtp.example.jp
            - Name: smtp_user
              Value: zbx_smtpuser:U9fixwLM

  # Launch zabbix server
  ServiceServer:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      ServiceName: zabbix-server-mysql
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 30
      LoadBalancers:
        - ContainerName: zabbix-server-mysql
          ContainerPort: 10051
          TargetGroupArn: !Ref TargetGroupNlb
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroupServer
          Subnets:
            - !Ref SubnetId1
            - !Ref SubnetId2
      TaskDefinition: !Ref TaskServer

  # Create zabbix web task definition
  TaskWeb:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt IamRole.Arn
      Family: zabbix-web
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: zabbix-web-nginx-mysql
          Image: zabbix/zabbix-web-nginx-mysql:alpine-trunk
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: zabbix
          MemoryReservation: 512
          PortMappings:
            - Protocol: tcp
              HostPort: 80
              ContainerPort: 80
          Environment:
            - Name: DB_SERVER_HOST
              Value: !GetAtt DbInstance.Endpoint.Address
            - Name: DB_SERVER_PORT
              Value: 3306
            - Name: MYSQL_DATABASE
              Value: zabbix
            - Name: MYSQL_USER
              Value: !Ref MasterDBUser
            - Name: MYSQL_PASSWORD
              Value: !Ref MasterDBPassword
            - Name: PHP_TZ
              Value: Asia/Tokyo
            - Name: ZBX_SERVER_HOST
              Value: !GetAtt Nlb.DNSName
            - Name: ZBX_SERVER_NAME
              Value: zabbix-server-mysql
            - Name: ZBX_SERVER_PORT
              Value: 10051

  # Launch zabbix web
  ServiceWeb:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      ServiceName: zabbix-web-nginx-mysql
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 30
      LoadBalancers:
        - ContainerName: zabbix-web-nginx-mysql
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroupAlb
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroupWeb
          Subnets:
            - !Ref SubnetId1
            - !Ref SubnetId2
      TaskDefinition: !Ref TaskWeb

  # Set Route53 record
  SetRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.CanonicalHostedZoneName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneNameID
      Comment: !Sub "for ${Role}"
      HostedZoneName: !Sub "${DomainName}."
      Name: !Sub "${Role}.${DomainName}"
      Type: "A"
