AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AWS Transfer for SFTP server(Public Access)

Parameters:
  ProjectName:
    Type: String
    Description: ""
  Env:
    Type: String
    Default: "dev"
    Description: ""
    AllowedValues:
      - dev
      - stg
      - prd
  Role:
    Type: String
    Default: "sftp"
    Description: ""
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: ""
  VpcCidr:
    Type: String
    Description: ""
  PubSubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: "e.g. \"subnet-123a351e,subnet-456b351e\""
  PriSubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: "e.g. \"subnet-123a351e,subnet-456b351e\""
  # DomainName:
  #   Type: String
  #   Description: ""

Conditions:
  SubDomain: !Equals [ !Ref Env, "prd" ]

Outputs:
  SftpBucketName:
    Value: !Ref Bucket
    Export:
      Name: !Sub "${ProjectName}-${Env}-${Role}-bucket"
  SftpUserRole:
    Value: !GetAtt IamRoleSftpUser.Arn
    Export:
      Name: !Sub "${ProjectName}-${Env}-${Role}-iam-role"
  SftpServerId:
    Value: !GetAtt SftpServer.ServerId
    Export:
      Name: !Sub "${ProjectName}-${Env}-${Role}-srv"

Resources:
  Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ProjectName}-${Env}-${Role}"
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-${Role}"
        - Key: Env
          Value: !Ref Env
        - Key: Role
          Value: !Ref Role

  # VPC SecurityGroup
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "for transfer service vpc endpoint"
      GroupName: !Sub "${ProjectName}-${Env}-${Role}-sg"
      SecurityGroupEgress:
        - IpProtocol : "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCidr
          Description: ""
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-${Role}-sg"
        - Key: Env
          Value: !Ref Env
        - Key: Role
          Value: !Ref Role

  # VPCEndpoint
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpoint.html
  SftpEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.transfer.server"
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds: !Ref PriSubnetIds

  # NLB
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub "${ProjectName}-${Env}-${Role}-tg"
      Protocol: TCP
      Port: 22
      HealthCheckProtocol: TCP
      TargetType: ip
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-${Role}-tg"
        - Key: Env
          Value: !Ref Env
        - Key: Role
          Value: !Ref Role
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
  Nlb:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ProjectName}-${Env}-${Role}-nlb"
      Type: network
      Scheme: internet-facing
      Subnets: !Ref PubSubnetIds
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-${Role}-nlb"
        - Key: Env
          Value: !Ref Env
        - Key: Role
          Value: !Ref Role
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref Nlb
      Protocol: TCP
      Port: 22

  # IAM Role
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ProjectName}-${Env}-${Role}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "transfer.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy
  IamPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref IamRole
      PolicyName: !Sub "${ProjectName}-${Env}-${Role}-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogStream"
              - "logs:DescribeLogStreams"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource: "*"

  IamRoleSftpUser:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ProjectName}-${Env}-${Role}-user-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "transfer.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
  IamPolicySftpUser:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref IamRoleSftpUser
      PolicyName: !Sub "${ProjectName}-${Env}-${Role}-user-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
            Resource: !GetAtt Bucket.Arn
          - Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:DeleteObjectVersion"
              - "s3:DeleteObject"
              - "s3:GetObjectVersion"
            Resource: !Join
                - "/"
                - - !GetAtt Bucket.Arn
                  - "*"

  IamRoleLambda:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ProjectName}-${Env}-${Role}-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  IamPolicyLambda:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref IamRoleLambda
      PolicyName: !Sub "${ProjectName}-${Env}-${Role}-lambda-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ec2:Describe*"
              - "elasticloadbalancing:RegisterTargets"
            Resource: "*"

  # SFTP
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-server.html
  SftpServer:
    Type: "AWS::Transfer::Server"
    Properties:
      EndpointDetails:
        VpcEndpointId: !Ref SftpEndpoint
      EndpointType: VPC_ENDPOINT
      IdentityProviderType: SERVICE_MANAGED
      LoggingRole: !GetAtt IamRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-${Role}-srv"
        - Key: Env
          Value: !Ref Env
        - Key: Role
          Value: !Ref Role

  # Lambda Function
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
  Function:
    Type: 'AWS::Lambda::Function'
    DeletionPolicy: 'Delete'
    Properties:
      Code:
        ZipFile: |
          # -*- coding: utf-8 -*-

          import cfnresponse
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              print("Request received:\n" + json.dumps(event))
              responseData = {}

              if event['RequestType'] == "Delete":
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return

              if event['RequestType'] == "Create":
                  try:
                      ec2 = boto3.client('ec2')
                      elbv2 = boto3.client('elbv2')

                      ids = event['ResourceProperties']['NetworkInterfaceIds']
                      print("NetworkInterfaceIds:" + ','.join(ids))

                      arn = os.environ['TARGETGROUP_ARN']
                      print("TargetGroup arn:" + arn)

                      for index, i in enumerate(ids):
                          interface = ec2.describe_network_interfaces(
                              NetworkInterfaceIds=[
                                  i,
                              ],
                          )

                          ip = interface['NetworkInterfaces'][0]['PrivateIpAddress']
                          elbv2.register_targets(
                              TargetGroupArn=arn,
                              Targets=[
                                  {
                                      'Id': ip,
                                      'Port': 22,
                                  },
                              ]
                          )

                          responseData['IP' + str(index)] = ip

                  except Exception as e:
                      responseData = {'error': str(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                      return

              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Description: "Register IP in VPC Endpoint network interface to TargetGroup"
      Environment:
        Variables:
          "TARGETGROUP_ARN": !Ref TargetGroup
      Handler: index.lambda_handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.7
      Timeout: 30

  # Custom resource
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html
  GetPrivateIPs:
    Type: "Custom::GetPrivateIPs"
    Properties:
      ServiceToken: !GetAtt Function.Arn
      NetworkInterfaceIds: !GetAtt SftpEndpoint.NetworkInterfaceIds

  # Route53
  # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
  # Route53DNSRecord:
  #   Type: "AWS::Route53::RecordSet"
  #   Properties:
  #     Type: A
  #     AliasTarget:
  #       DNSName: !GetAtt Nlb.DNSName
  #       HostedZoneId: !GetAtt Nlb.CanonicalHostedZoneID
  #     Comment: "NLB for SFTP"
  #     HostedZoneName: !Ref DomainName
  #     Name: !If
  #       - SubDomain
  #       - !Sub "${Env}-sftp.${DomainName}"
  #       - !Sub "sftp.${DomainName}"
